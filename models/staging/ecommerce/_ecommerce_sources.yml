version: 2

sources:
  - name: olist_ecommerce
    description: |
      Raw e-commerce data from the Olist marketplace platform.

      **Business Context**: Olist is a Brazilian e-commerce platform that connects
      small businesses to major marketplaces. This data contains anonymized
      information about orders, customers, products, and seller performance.

      **Data Scope**: Covers orders from 2016-2018 with over 100k orders and
      customer interactions across Brazil.

      **Update Frequency**: In production, this would be updated via CDC from
      the operational database. For this simulation, we use seed files to represent
      the raw data that would normally come from an ETL pipeline.

    meta:
      owner: "data-engineering@olist.com"
      extraction_method: "Daily CDC via Fivetran (simulated with seeds)"
      source_system: "Olist PostgreSQL Database (simulated)"
      data_classification: "internal"
      business_domain: "ecommerce"

    tables:
      - name: orders
        description: |
          Core order information including customer, dates, and status.
          One row per order placed on the platform.

          **Business Rules**:
          - Order status progresses: created → approved → processing → shipped → delivered
          - Cancelled orders can occur at any stage
          - Delivery dates are when customer receives the package

        meta:
          primary_key: "order_id"
          row_count_range: [95000, 105000]

        freshness:
          warn_after: {count: 2, period: day}
          error_after: {count: 3, period: day}

        columns:
          - name: order_id
            description: "Unique identifier for each order (UUID format)"
            tests:
              - unique
              - not_null

          - name: customer_id
            description: "Customer identifier, links to customer data"
            tests:
              - not_null

          - name: order_status
            description: |
              Current status of the order in fulfillment process.
              Values: 'delivered', 'shipped', 'processing', 'cancelled', 'created', 'approved', 'invoiced', 'unavailable'
            tests:
              - not_null
              - accepted_values:
                  values: ['delivered', 'shipped', 'processing', 'cancelled', 'created', 'approved', 'invoiced', 'unavailable']

          - name: order_purchase_timestamp
            description: "Timestamp when customer completed the purchase (UTC)"
            tests:
              - not_null

          - name: order_approved_at
            description: "Timestamp when order was approved for processing"

          - name: order_delivered_carrier_date
            description: "Date when order was delivered to carrier for shipping"

          - name: order_delivered_customer_date
            description: "Date when package was delivered to customer"

          - name: order_estimated_delivery_date
            description: "Estimated delivery date communicated to customer"

      - name: order_items
        description: |
          Individual items within each order, including product and pricing details.
          One row per product ordered (orders can contain multiple items).

          **Business Rules**:
          - Item price + freight = total item cost
          - Order total = sum of all item costs for that order
          - Item sequence number indicates order within the order

        meta:
          primary_key: ["order_id", "order_item_id"]
          row_count_range: [110000, 120000]

        columns:
          - name: order_id
            description: "Foreign key to orders table"
            tests:
              - not_null

          - name: order_item_id
            description: "Sequence number of item within the order (starts at 1)"
            tests:
              - not_null

          - name: product_id
            description: "Product identifier, links to product catalog"
            tests:
              - not_null

          - name: seller_id
            description: "Seller identifier, links to seller information"
            tests:
              - not_null

          - name: shipping_limit_date
            description: "Latest date seller should ship the item"

          - name: price
            description: "Product price in Brazilian Real (BRL)"
            tests:
              - not_null
              - dbt_utils.accepted_range:
                  min_value: 0
                  max_value: 7000

          - name: freight_value
            description: "Shipping cost for this item in Brazilian Real (BRL)"
            tests:
              - not_null
              - dbt_utils.accepted_range:
                  min_value: 0
                  max_value: 500

      - name: customers
        description: |
          Customer information including geographic location.
          One row per customer with anonymized data.

          **Business Rules**:
          - Customer IDs are anonymized but consistent across orders
          - Geographic data is at city/state level for privacy
          - Location data enables shipping logistics and regional analysis

        meta:
          primary_key: "customer_id"
          row_count_range: [95000, 105000]

        columns:
          - name: customer_id
            description: "Unique customer identifier (anonymized)"
            tests:
              - unique
              - not_null

          - name: customer_unique_id
            description: "Alternative customer identifier for data integrity"
            tests:
              - not_null

          - name: customer_zip_code_prefix
            description: "First 5 digits of customer zip code (privacy protection)"
            tests:
              - not_null

          - name: customer_city
            description: "Customer city name"
            tests:
              - not_null

          - name: customer_state
            description: "Customer state abbreviation (2 letters)"
            tests:
              - not_null

      - name: products
        description: |
          Product catalog with category and attribute information.
          One row per product available on the platform.

        meta:
          primary_key: "product_id"
          row_count_range: [32000, 34000]

        columns:
          - name: product_id
            description: "Unique product identifier"
            tests:
              - unique
              - not_null

          - name: product_category_name
            description: "Product category in Portuguese (original language)"

          - name: product_name_lenght
            description: "Length of product name in characters"

          - name: product_description_lenght
            description: "Length of product description in characters"

          - name: product_photos_qty
            description: "Number of product photos available"

          - name: product_weight_g
            description: "Product weight in grams"

          - name: product_length_cm
            description: "Product length in centimeters"

          - name: product_height_cm
            description: "Product height in centimeters"

          - name: product_width_cm
            description: "Product width in centimeters"

      - name: sellers
        description: |
          Seller information including geographic location.
          One row per seller active on the platform.

        meta:
          primary_key: "seller_id"
          row_count_range: [3000, 4000]

        columns:
          - name: seller_id
            description: "Unique seller identifier"
            tests:
              - unique
              - not_null

          - name: seller_zip_code_prefix
            description: "First 5 digits of seller zip code"
            tests:
              - not_null

          - name: seller_city
            description: "Seller city name"
            tests:
              - not_null

          - name: seller_state
            description: "Seller state abbreviation"
            tests:
              - not_null

      - name: order_payments
        description: |
          Payment information for orders including method and installments.
          Multiple rows per order possible (split payments).

        meta:
          primary_key: ["order_id", "payment_sequential"]
          row_count_range: [100000, 110000]

        columns:
          - name: order_id
            description: "Foreign key to orders table"
            tests:
              - not_null

          - name: payment_sequential
            description: "Sequential number for multiple payments on same order"
            tests:
              - not_null

          - name: payment_type
            description: |
              Payment method used.
              Values: 'credit_card', 'boleto', 'voucher', 'debit_card', 'not_defined'
            tests:
              - not_null
              - accepted_values:
                  values: ['credit_card', 'boleto', 'voucher', 'debit_card', 'not_defined']

          - name: payment_installments
            description: "Number of payment installments"
            tests:
              - not_null
              - dbt_utils.accepted_range:
                  min_value: 0
                  max_value: 24

          - name: payment_value
            description: "Payment amount in Brazilian Real (BRL)"
            tests:
              - not_null
              - dbt_utils.accepted_range:
                  min_value: 0
                  max_value: 14000

      - name: order_reviews
        description: |
          Customer reviews and ratings for delivered orders.
          One row per order review (not all orders have reviews).

        meta:
          primary_key: ["review_id", "order_id"]
          row_count_range: [95000, 105000]

        columns:
          - name: review_id
            description: "Unique review identifier"
            tests:
              - unique
              - not_null

          - name: order_id
            description: "Foreign key to orders table"
            tests:
              - not_null

          - name: review_score
            description: "Customer rating from 1 (worst) to 5 (best)"
            tests:
              - not_null
              - accepted_values:
                  values: [1, 2, 3, 4, 5]

          - name: review_comment_title
            description: "Review title written by customer"

          - name: review_comment_message
            description: "Review message written by customer"

          - name: review_creation_date
            description: "Date when review was created"
            tests:
              - not_null

          - name: review_answer_timestamp
            description: "Timestamp when review was answered by seller"
